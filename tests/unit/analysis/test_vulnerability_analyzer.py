"""Tests for the vulnerability analyzer."""

import json
import tempfile
from pathlib import Path

import pytest

from insect.analysis.vulnerability_analyzer import (
    OSVDatabase,
    PackageInfo,
    Vulnerability,
    VulnerabilityAnalyzer,
)
from insect.finding import Severity


class TestPackageInfo:
    """Test the PackageInfo dataclass."""

    def test_package_info_creation(self):
        """Test creating a PackageInfo instance."""
        package = PackageInfo(
            name="requests",
            version="2.25.0",
            ecosystem="pypi",
            file_path="requirements.txt",
            line_number=1,
        )

        assert package.name == "requests"
        assert package.version == "2.25.0"
        assert package.ecosystem == "pypi"
        assert package.file_path == "requirements.txt"
        assert package.line_number == 1


class TestOSVDatabase:
    """Test the OSV database integration."""

    def test_version_comparison(self):
        """Test version comparison logic."""
        with tempfile.TemporaryDirectory() as temp_dir:
            db = OSVDatabase(Path(temp_dir))

            # Test exact comparison
            assert db._compare_versions("1.0.0", "1.0.0") == 0
            assert db._compare_versions("1.0.0", "1.0.1") == -1
            assert db._compare_versions("1.0.1", "1.0.0") == 1

            # Test different lengths
            assert db._compare_versions("1.0", "1.0.0") == 0
            assert db._compare_versions("1.1", "1.0.9") == 1

    def test_version_in_ranges(self):
        """Test version range checking."""
        with tempfile.TemporaryDirectory() as temp_dir:
            db = OSVDatabase(Path(temp_dir))

            # Test various range patterns
            assert db._version_matches_range("1.0.0", "< 2.0.0")
            assert not db._version_matches_range("2.0.0", "< 2.0.0")
            assert db._version_matches_range("1.5.0", ">= 1.0.0")
            assert not db._version_matches_range("0.9.0", ">= 1.0.0")

    def test_ecosystem_mapping(self):
        """Test ecosystem name mapping."""
        with tempfile.TemporaryDirectory() as temp_dir:
            db = OSVDatabase(Path(temp_dir))

            assert db._map_ecosystem("pypi") == "PyPI"
            assert db._map_ecosystem("npm") == "npm"
            assert db._map_ecosystem("go") == "Go"
            assert db._map_ecosystem("rust") == "crates.io"


class TestVulnerabilityAnalyzer:
    """Test the vulnerability analyzer."""

    @pytest.fixture
    def analyzer(self):
        """Create a vulnerability analyzer for testing."""
        config = {
            "vulnerability": {
                "cache_dir": "/tmp/test_cache"
            }
        }
        return VulnerabilityAnalyzer(config)

    def test_ecosystem_detection(self, analyzer):
        """Test ecosystem detection from file names."""
        # Python files
        assert analyzer._detect_ecosystem(Path("requirements.txt")) == "pypi"
        assert analyzer._detect_ecosystem(Path("pyproject.toml")) == "pypi"
        assert analyzer._detect_ecosystem(Path("setup.py")) == "pypi"

        # Node.js files
        assert analyzer._detect_ecosystem(Path("package.json")) == "npm"
        assert analyzer._detect_ecosystem(Path("package-lock.json")) == "npm"

        # Go files
        assert analyzer._detect_ecosystem(Path("go.mod")) == "go"
        assert analyzer._detect_ecosystem(Path("go.sum")) == "go"

        # Rust files
        assert analyzer._detect_ecosystem(Path("Cargo.toml")) == "rust"

    def test_parse_requirements_txt(self, analyzer):
        """Test parsing requirements.txt files."""
        content = """
# This is a comment
requests>=2.25.0
flask==1.1.0
django~=3.0.0
numpy
        """.strip()

        with tempfile.NamedTemporaryFile(mode='w', suffix='requirements.txt', delete=False) as f:
            f.write(content)
            f.flush()

            packages = analyzer._parse_requirements_txt(Path(f.name), content)

            assert len(packages) == 3  # numpy doesn't have version, so excluded

            # Check requests package
            requests_pkg = next(p for p in packages if p.name == "requests")
            assert requests_pkg.version == "2.25.0"
            assert requests_pkg.ecosystem == "pypi"

            # Check flask package
            flask_pkg = next(p for p in packages if p.name == "flask")
            assert flask_pkg.version == "1.1.0"

            # Check django package
            django_pkg = next(p for p in packages if p.name == "django")
            assert django_pkg.version == "3.0.0"

    def test_parse_package_json(self, analyzer):
        """Test parsing package.json files."""
        content = {
            "dependencies": {
                "express": "^4.17.1",
                "lodash": "~4.17.20",
                "react": "17.0.2"
            },
            "devDependencies": {
                "jest": "^26.6.0"
            }
        }

        with tempfile.NamedTemporaryFile(mode='w', suffix='package.json', delete=False) as f:
            json.dump(content, f)
            f.flush()

            packages = analyzer._parse_npm_dependencies(Path(f.name), json.dumps(content))

            assert len(packages) == 4

            # Check express package
            express_pkg = next(p for p in packages if p.name == "express")
            assert express_pkg.version == "4.17.1"
            assert express_pkg.ecosystem == "npm"

    def test_parse_go_mod(self, analyzer):
        """Test parsing go.mod files."""
        content = """
module github.com/example/myapp

go 1.18

require (
    github.com/gorilla/mux v1.8.0
    github.com/stretchr/testify v1.7.0
)
        """.strip()

        with tempfile.NamedTemporaryFile(mode='w', suffix='go.mod', delete=False) as f:
            f.write(content)
            f.flush()

            packages = analyzer._parse_go_dependencies(Path(f.name), content)

            assert len(packages) == 2

            # Check gorilla/mux package
            mux_pkg = next(p for p in packages if "gorilla/mux" in p.name)
            assert mux_pkg.version == "1.8.0"
            assert mux_pkg.ecosystem == "go"

    def test_severity_mapping(self, analyzer):
        """Test mapping OSV severity to our severity scale."""
        # Test CVSS score mapping
        assert analyzer._map_severity("", 9.5) == Severity.CRITICAL
        assert analyzer._map_severity("", 7.5) == Severity.HIGH
        assert analyzer._map_severity("", 5.0) == Severity.MEDIUM
        assert analyzer._map_severity("", 2.0) == Severity.LOW

        # Test text-based severity
        assert analyzer._map_severity("CRITICAL", None) == Severity.HIGH
        assert analyzer._map_severity("HIGH", None) == Severity.HIGH
        assert analyzer._map_severity("MEDIUM", None) == Severity.MEDIUM
        assert analyzer._map_severity("LOW", None) == Severity.LOW
        assert analyzer._map_severity("UNKNOWN", None) == Severity.MEDIUM

    def test_analyze_file_structure(self, analyzer):
        """Test that the analyzer properly detects packages from dependency files."""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Create a properly named requirements.txt file
            req_file = Path(temp_dir) / "requirements.txt"
            req_file.write_text("requests==2.25.0\nflask>=1.0.0\n")

            # Test that it can detect packages (no vulnerabilities expected without real OSV query)
            packages = analyzer._detect_packages(req_file)

            assert len(packages) == 2
            assert any(p.name == "requests" and p.version == "2.25.0" for p in packages)
            assert any(p.name == "flask" and p.version == "1.0.0" for p in packages)

    def test_sbom_generation(self, analyzer):
        """Test SBOM generation."""
        with tempfile.TemporaryDirectory() as temp_dir:
            # Create test files
            requirements_file = Path(temp_dir) / "requirements.txt"
            requirements_file.write_text("requests>=2.25.0\nflask==1.1.0\n")

            package_file = Path(temp_dir) / "package.json"
            package_file.write_text('{"dependencies": {"express": "^4.17.1"}}')

            sbom = analyzer.generate_sbom(Path(temp_dir))

            assert sbom["bomFormat"] == "CycloneDX"
            assert sbom["specVersion"] == "1.4"
            assert "components" in sbom

            # Should have components from both files
            component_names = [comp["name"] for comp in sbom["components"]]
            assert "requests" in component_names
            assert "flask" in component_names
            assert "express" in component_names

    def test_can_analyze_file(self, analyzer):
        """Test file analysis capability detection."""
        # Should analyze dependency files
        assert analyzer.can_analyze_file(Path("requirements.txt"))
        assert analyzer.can_analyze_file(Path("package.json"))
        assert analyzer.can_analyze_file(Path("go.mod"))
        assert analyzer.can_analyze_file(Path("Cargo.toml"))

        # Should not analyze random files
        assert not analyzer.can_analyze_file(Path("README.md"))
        assert not analyzer.can_analyze_file(Path("script.sh"))

    def test_vulnerability_description_formatting(self, analyzer):
        """Test vulnerability description formatting."""
        package = PackageInfo(
            name="requests",
            version="2.25.0",
            ecosystem="pypi",
            file_path="requirements.txt"
        )

        vuln = Vulnerability(
            id="CVE-2021-1234",
            summary="Test vulnerability in requests",
            severity="HIGH",
            cvss_score=8.5,
            affected_versions=["< 2.26.0"],
            fixed_version="2.26.0",
            references=["https://example.com/cve-2021-1234"],
            published=None,
            modified=None
        )

        description = analyzer._format_vulnerability_description(package, vuln)

        assert "requests" in description
        assert "2.25.0" in description
        assert "Test vulnerability in requests" in description
        assert "8.5" in description
        assert "2.26.0" in description
        assert "https://example.com/cve-2021-1234" in description

name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev

    - name: Run all checks and tests with tox
      run: pipenv run tox -e all

  release:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Get current date
      id: date
      run: echo "date=$(date -u)" >> $GITHUB_OUTPUT

    - name: Extract release notes
      id: release_notes
      run: |
        VERSION="${{ github.ref_name }}"
        RELEASE_FILE="docs/releases/RELEASE_NOTES_${VERSION}.md"
        
        if [ -f "$RELEASE_FILE" ]; then
          echo "Found release notes file: $RELEASE_FILE"
          # Read the file content and escape for GitHub Actions
          CONTENT=$(cat "$RELEASE_FILE")
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "No release notes file found for $VERSION, using default"
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in this Release" >> $GITHUB_OUTPUT
          echo "- Security scanner improvements" >> $GITHUB_OUTPUT
          echo "- PyPI package release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Version**: $VERSION" >> $GITHUB_OUTPUT
          echo "**Build Date**: $(date -u)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: false

    - name: Trigger documentation deployment
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: deploy-docs
        client-payload: '{"version": "${{ github.ref_name }}"}'